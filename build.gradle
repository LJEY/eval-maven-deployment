apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'signing'

repositories {
    mavenCentral()
}

dependencies {
    testCompile 'junit:junit:4.+'
}

jar {
    baseName = 'gs-gradle'
    version =  '0.1.0'
    manifest {
        attributes(
        'Main-Class': 'hello.HelloWorld'
        )
    }
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

test {
    // show standard out and standard error of the test JVM(s) on the console
    testLogging.showStandardStreams = true
}

task sourceJar(type: Jar) {
    classifier "sources"
    from sourceSets.main.allJava 
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier "javadoc"
    from javadoc.destinationDir
}

artifacts {
    archives jar 
    archives sourceJar
    archives javadocJar
}

signing {
    sign configurations.archives
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            customizePom(pom)
            groupId 'io.klib.tools'
            artifactId 'eval-maven-deployment'
            version '0.1.0'

            from components.java

			// create the sign pom artifact
			pom.withXml {
				def pomFile = file("${project.buildDir}/generated-pom.xml")
				writeTo(pomFile)
				def pomAscFile = signing.sign(pomFile).signatureFiles[0]
				artifact(pomAscFile) {
					classifier = null
					extension = 'pom.asc'
				}
			}

            artifact(sourceJar) {
                classifier = 'sources'
            }
            artifact(javadocJar) {
                classifier = 'javadoc'
            }
			
			// create the signed artifacts
			project.tasks.signArchives.signatureFiles.each {
				artifact(it) {
					def matcher = it.file =~ /-(sources|javadoc)\.jar\.asc$/
					if (matcher.find()) {
						classifier = matcher.group(1)
					} else {
						classifier = null
					}
					extension = '.asc'
				}
			}
			
        }
    }
    repositories {
        maven {
            url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            credentials {
                username 
                password 
            }
        }
    }
}

def customizePom(pom) {
    pom.withXml {
        def root = asNode()

        // eliminate test-scoped dependencies (no need in maven central POMs)
        root.dependencies.removeAll { dep ->
            dep.scope == "test"
        }

        // add all items necessary for maven central publication
        root.children().last() + {
            resolveStrategy = Closure.DELEGATE_FIRST

            description 'Test to publish to Maven central'
            name 'eval maven deployment'
            url 'https://github.com/LJEY/eval-maven-deployment'
            organization {
                name 'com.github.LJEY'
                url 'https://github.com/LJEY'
            }
            /*issueManagement {
                system 'GitHub'
                url 'https://github.com/mautini/schemaorg-java/issues'
            }
            licenses {
                license {
                    name 'Apache License 2.0'
                    url 'https://github.com/mautini/schemaorg-java/blob/master/LICENSE'
                    distribution 'repo'
                }
            }*/
            scm {
                url 'https://github.com/LJEY/eval-maven-deployment'
                connection 'scm:git:git://github.com/LJEY/eval-maven-deployment.git'
                developerConnection 'scm:git:ssh://git@github.com:LJEY/eval-maven-deployment.git'
            }
            developers {
                developer {
                    name 'Lukas Joraschek'
                }
            }
        }
    }
}

model {
	tasks.generatePomFileForMavenJavaPublication {
        destination = file("$buildDir/generated-pom.xml")
    }
    tasks.publishMavenJavaPublicationToMavenLocal {
        dependsOn project.tasks.signArchives
    }
    tasks.publishMavenJavaPublicationToMavenRepository {
        dependsOn project.tasks.signArchives
    }
}

